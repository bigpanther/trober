// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bigpanther/trober/firebase (interfaces: Firebase)

// Package actions is a generated GoMock package.
package actions

import (
	context "context"
	reflect "reflect"

	auth "firebase.google.com/go/v4/auth"
	messaging "firebase.google.com/go/v4/messaging"
	models "github.com/bigpanther/trober/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFirebase is a mock of Firebase interface.
type MockFirebase struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseMockRecorder
}

// MockFirebaseMockRecorder is the mock recorder for MockFirebase.
type MockFirebaseMockRecorder struct {
	mock *MockFirebase
}

// NewMockFirebase creates a new mock instance.
func NewMockFirebase(ctrl *gomock.Controller) *MockFirebase {
	mock := &MockFirebase{ctrl: ctrl}
	mock.recorder = &MockFirebaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebase) EXPECT() *MockFirebaseMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockFirebase) GetUser(arg0 context.Context, arg1 string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockFirebaseMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFirebase)(nil).GetUser), arg0, arg1)
}

// SendAll mocks base method.
func (m *MockFirebase) SendAll(arg0 context.Context, arg1 []*messaging.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAll indicates an expected call of SendAll.
func (mr *MockFirebaseMockRecorder) SendAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAll", reflect.TypeOf((*MockFirebase)(nil).SendAll), arg0, arg1)
}

// SetClaims mocks base method.
func (m *MockFirebase) SetClaims(arg0 context.Context, arg1 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClaims", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClaims indicates an expected call of SetClaims.
func (mr *MockFirebaseMockRecorder) SetClaims(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaims", reflect.TypeOf((*MockFirebase)(nil).SetClaims), arg0, arg1)
}

// SubscribeToTopics mocks base method.
func (m *MockFirebase) SubscribeToTopics(arg0 context.Context, arg1 *models.User, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToTopics", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeToTopics indicates an expected call of SubscribeToTopics.
func (mr *MockFirebaseMockRecorder) SubscribeToTopics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToTopics", reflect.TypeOf((*MockFirebase)(nil).SubscribeToTopics), arg0, arg1, arg2)
}

// UnSubscribeToTopics mocks base method.
func (m *MockFirebase) UnSubscribeToTopics(arg0 context.Context, arg1 *models.User, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeToTopics", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnSubscribeToTopics indicates an expected call of UnSubscribeToTopics.
func (mr *MockFirebaseMockRecorder) UnSubscribeToTopics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeToTopics", reflect.TypeOf((*MockFirebase)(nil).UnSubscribeToTopics), arg0, arg1, arg2)
}
