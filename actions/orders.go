package actions

import (
	"fmt"
	"net/http"
	"time"

	"github.com/bigpanther/trober/models"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gofrs/uuid"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Order)
// DB Table: Plural (orders)
// Resource: Plural (Orders)
// Path: Plural (/orders)
// View Template Folder: Plural (/templates/orders/)

// ordersList gets all Orders. This function is mapped to the path
// GET /orders
func ordersList(c buffalo.Context) error {
	var loggedInUser = loggedInUser(c)
	if !loggedInUser.IsAtLeastBackOffice() {
		return c.Render(http.StatusNotFound, r.JSON(models.NewCustomError(http.StatusText(http.StatusNotFound), fmt.Sprint(http.StatusNotFound), errNotFound)))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	orders := &models.Orders{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	customerID := c.Param("customer_id")
	if customerID != "" {
		q = q.Where("customer_id = ?", customerID)
	}
	// Retrieve all Orders from the DB
	if err := q.Scope(restrictedScope(c)).Order(orderByCreatedAtDesc).All(orders); err != nil {
		return err
	}

	return c.Render(200, r.JSON(orders))

}

// ordersShow gets the data for one Order. This function is mapped to
// the path GET /orders/{order_id}
func ordersShow(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Order
	order := &models.Order{}
	var populatedFields = []string{"Customer"}

	// To find the Order the parameter order_id is used.
	if err := tx.Eager(populatedFields...).Scope(restrictedScope(c)).Find(order, c.Param("order_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(order))

}

// ordersCreate adds a Order to the DB. This function is mapped to the
// path POST /orders
func ordersCreate(c buffalo.Context) error {
	var loggedInUser = loggedInUser(c)

	// Allocate an empty Order
	order := &models.Order{}

	// Bind order to the html form elements
	if err := c.Bind(order); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	if !loggedInUser.IsSuperAdmin() || order.TenantID == uuid.Nil {
		order.TenantID = loggedInUser.TenantID
	}
	order.CreatedBy = loggedInUser.ID
	order.CreatedAt = time.Now().UTC()
	order.UpdatedAt = time.Now().UTC()

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(order)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusCreated, r.JSON(order))

}

// ordersUpdate changes a Order in the DB. This function is mapped to
// the path PUT /orders/{order_id}
func ordersUpdate(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Order
	order := &models.Order{}

	if err := tx.Scope(restrictedScope(c)).Find(order, c.Param("order_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Order to the html form elements
	if err := c.Bind(order); err != nil {
		return err
	}
	order.UpdatedAt = time.Now().UTC()

	verrs, err := tx.ValidateAndUpdate(order)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusOK, r.JSON(order))

}

// ordersDestroy deletes a Order from the DB. This function is mapped
// to the path DELETE /orders/{order_id}
func ordersDestroy(c buffalo.Context) error {
	var loggedInUser = loggedInUser(c)
	if !loggedInUser.IsAtLeastBackOffice() {
		return c.Render(http.StatusNotFound, r.JSON(models.NewCustomError(http.StatusText(http.StatusNotFound), fmt.Sprint(http.StatusNotFound), errNotFound)))
	}
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Order
	order := &models.Order{}

	// To find the Order the parameter order_id is used.
	if err := tx.Scope(restrictedScope(c)).Find(order, c.Param("order_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(order); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(order))

}
