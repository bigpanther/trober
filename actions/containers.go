package actions

import (
	"net/http"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gofrs/uuid"
	"github.com/shipanther/trober/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Container)
// DB Table: Plural (containers)
// Resource: Plural (Containers)
// Path: Plural (/containers)
// View Template Folder: Plural (/templates/containers/)

// ContainersResource is the resource for the Container model
type ContainersResource struct {
	buffalo.Resource
}

// List gets all Containers. This function is mapped to the path
// GET /containers
func (v ContainersResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	containers := &models.Containers{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	var loggedInUser = loggedInUser(c)
	if loggedInUser.IsDriver() {
		q = q.Where("driver_id = ?", loggedInUser.ID)
	}

	// Retrieve all Containers from the DB
	if err := q.Scope(restrictedScope(c)).All(containers); err != nil {
		return err
	}

	return c.Render(200, r.JSON(containers))

}

// Show gets the data for one Container. This function is mapped to
// the path GET /containers/{container_id}
func (v ContainersResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Container
	container := &models.Container{}

	// To find the Container the parameter container_id is used.
	if err := tx.Scope(restrictedScope(c)).Find(container, c.Param("container_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(container))

}

// Create adds a Container to the DB. This function is mapped to the
// path POST /containers
func (v ContainersResource) Create(c buffalo.Context) error {
	// Allocate an empty Container
	container := &models.Container{}

	// Bind container to the html form elements
	if err := c.Bind(container); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}
	var loggedInUser = loggedInUser(c)
	if !loggedInUser.IsSuperAdmin() || container.TenantID == uuid.Nil {
		container.TenantID = loggedInUser.TenantID
	}
	container.CreatedBy = loggedInUser.ID
	container.CreatedAt = time.Now().UTC()
	container.UpdatedAt = time.Now().UTC()
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(container)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
	}

	return c.Render(http.StatusCreated, r.JSON(container))

}

// Update changes a Container in the DB. This function is mapped to
// the path PUT /containers/{container_id}
func (v ContainersResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Container
	container := &models.Container{}

	if err := tx.Scope(restrictedScope(c)).Find(container, c.Param("container_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Container to the html form elements
	if err := c.Bind(container); err != nil {
		return err
	}
	container.UpdatedAt = time.Now().UTC()

	verrs, err := tx.ValidateAndUpdate(container)
	if err != nil {
		return err
	}

	if verrs.HasAny() {

		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))

	}

	return c.Render(http.StatusOK, r.JSON(container))

}

// Destroy deletes a Container from the DB. This function is mapped
// to the path DELETE /containers/{container_id}
func (v ContainersResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Container
	container := &models.Container{}

	// To find the Container the parameter container_id is used.
	if err := tx.Scope(restrictedScope(c)).Find(container, c.Param("container_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(container); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(container))
}
