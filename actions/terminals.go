package actions

import (
	"net/http"
	"time"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gofrs/uuid"
	"github.com/shipanther/trober/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Terminal)
// DB Table: Plural (terminals)
// Resource: Plural (Terminals)
// Path: Plural (/terminals)
// View Template Folder: Plural (/templates/terminals/)

// TerminalsResource is the resource for the Terminal model
type TerminalsResource struct {
	buffalo.Resource
}

// List gets all Terminals. This function is mapped to the path
// GET /terminals
func (v TerminalsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	terminals := &models.Terminals{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Terminals from the DB
	if err := q.Scope(restrictedScope(c)).All(terminals); err != nil {
		return err
	}

	return c.Render(200, r.JSON(terminals))

}

// Show gets the data for one Terminal. This function is mapped to
// the path GET /terminals/{terminal_id}
func (v TerminalsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Terminal
	terminal := &models.Terminal{}

	// To find the Terminal the parameter terminal_id is used.
	if err := tx.Scope(restrictedScope(c)).Find(terminal, c.Param("terminal_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(200, r.JSON(terminal))

}

// Create adds a Terminal to the DB. This function is mapped to the
// path POST /terminals
func (v TerminalsResource) Create(c buffalo.Context) error {
	// Allocate an empty Terminal
	terminal := &models.Terminal{}

	// Bind terminal to the html form elements
	if err := c.Bind(terminal); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}
	var loggedInUser = loggedInUser(c)
	if loggedInUser.Role != "SuperAdmin" || terminal.TenantID == uuid.Nil {
		terminal.TenantID = loggedInUser.TenantID
	}
	terminal.CreatedBy = loggedInUser.ID
	terminal.CreatedAt = time.Now().UTC()
	terminal.UpdatedAt = time.Now().UTC()
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(terminal)
	if err != nil {
		return err
	}

	if verrs.HasAny() {

		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))

	}

	return c.Render(http.StatusCreated, r.JSON(terminal))

}

// Update changes a Terminal in the DB. This function is mapped to
// the path PUT /terminals/{terminal_id}
func (v TerminalsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Terminal
	terminal := &models.Terminal{}

	if err := tx.Scope(restrictedScope(c)).Find(terminal, c.Param("terminal_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Terminal to the html form elements
	if err := c.Bind(terminal); err != nil {
		return err
	}
	terminal.UpdatedAt = time.Now().UTC()

	verrs, err := tx.ValidateAndUpdate(terminal)
	if err != nil {
		return err
	}

	if verrs.HasAny() {

		return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))

	}

	return c.Render(http.StatusOK, r.JSON(terminal))

}

// Destroy deletes a Terminal from the DB. This function is mapped
// to the path DELETE /terminals/{terminal_id}
func (v TerminalsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return models.ErrNotFound
	}

	// Allocate an empty Terminal
	terminal := &models.Terminal{}

	// To find the Terminal the parameter terminal_id is used.
	if err := tx.Scope(restrictedScope(c)).Find(terminal, c.Param("terminal_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(terminal); err != nil {
		return err
	}

	return c.Render(http.StatusOK, r.JSON(terminal))

}
